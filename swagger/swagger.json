{
  "swagger": "2.0",
  "info": {
    "title": "Cold Case Matching Game API",
    "description": "API endpoints to retrieve information such as cold case data, matching game score list, and game information.",
    "version": "1.0.0"
  },
  "host": ["localhost:3000"],
  "basePath": "/",
  "tags": [
    {
      "name": "Agency Information",
      "description": "Endpoints to create, update, delete agency information. This agency information will be tied to each case file in a one to many relationship."
    },
    {
      "name": "Cold Case File",
      "description": "API endpoints for retrieving data on cold cases"
    },
    {
      "name": "Score",
      "description": "API endpoints for adding, removing, updating and getting scores objects"
    },
    {
      "name": "User",
      "description": "API endpoints for retrieving an authenticated user's information."
    }
  ],
  "schemes": ["http", "https"],
  "paths": {
    "/cases": {
      "get": {
        "tags": ["Cold Case File"],
        "description": "Get all cold cases in the collection",
        "parameters": [
          {  
            "name":"caseType",
            "in":"query",
            "description":"The case can be fetched using a Case Type. EX: Homicide; Unknown; Missing Persons, etc.",
            "required":false,
            "type":"string"
          },
          {  
            "name":"caseDate",
            "in":"query",
            "description":"Case can be fetched from a date parameter. EX: 2022-10-15",
            "required":false,
            "type":"string"
          },
          {  
            "name":"caseStatus",
            "in":"query",
            "description":"Displaying cases by status. EX: Solved; Unsolved.",
            "required":false,
            "type":"string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": ["Cold Case File"],
        "description": "Create a new cold case. (used for people authorized to create case files.)",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "caseName": {
                  "example": "Baker Co John Doe 1995"
                },
                "summarizedCaseDescription": {
                  "example": "any"
                },
                "caseType": {
                  "example": "homicide; missing persons, etc."
                },
                "victimPicture": {
                  "example": "paste base 64 of image here"
                },
                "victimName": {
                  "example": "Unknown"
                },
                "victimAge": {
                  "example": "15"
                },
                "caseDate": {
                  "example": "2022-10-15"
                },
                "location": {
                  "example": "any"
                },
                "caseStatus": {
                  "example": "unsolved"
                },
                "websiteUrl": {
                  "example": "https://dnadoeproject.org/case/rock-co-john-doe-1981/"
                },
                "agencyInformation": {
                  "example": "62c6594f19deccde1e79c40d"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/cases/{id}": {
      "get": {
        "tags": ["Cold Case File"],
        "description": "Retrieve one Cold Case object in collection using an ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": ["Cold Case File"],
        "description": "Delete one case file object in the collection using an ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": ["Cold Case File"],
        "description": "Update an existing case file object in the collection using the ID. Example is updating status of the cold case file from unsolved to solved.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "caseName": {
                  "example": "Baker Co John Doe 1995"
                },
                "summarizedCaseDescription": {
                  "example": "Insert brief description here."
                },
                "caseType": {
                  "example": "homicide; missing persons; etc."
                },
                "victimPicture": {
                  "example": "paste base 64 of image here"
                },
                "victimName": {
                  "example": "Unknown"
                },
                "victimAge": {
                  "example": "15"
                },
                "caseDate": {
                  "example": "2022-10-15"
                },
                "location": {
                  "example": "Beaver Creek Township, MN"
                },
                "caseStatus": {
                  "example": "unsolved"
                },
                "websiteUrl": {
                  "example": "https://dnadoeproject.org/case/rock-co-john-doe-1981/"
                },
                "agencyInformation (ObjectID as string)": {
                  "example": "62c6594f19deccde1e79c40d"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/scores": {
      "get": {
        "tags": ["Score"],
        "description": "Retrieve all scores from the collection.",
        "parameters": [
          {  
            "name":"username",
            "in":"query",
            "description":"Can filter documents in collection down to specific user. Use Email address for this. EX: chsmoses@gmail.com",
            "required":false,
            "type":"string"
          },
          {  
            "name":"ranking",
            "in":"query",
            "description":"Filters and returns a specific ranking in the score collection. EX: 5",
            "required":false,
            "type":"string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": ["Score"],
        "description": "Adds score to the database from the complewted game",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "score": {
                  "example": "138123"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/scores/{id}": {
      "get": {
        "tags": ["Score"],
        "description": "Get score by user ID (This may not work unless we have a user collection containing a score property)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": ["Score"],
        "description": "Removes a score from the database. If wanting to display the top 10 or 20 scores, as scores are added, lower scores can be removed using this API, giving the API the ID of the score.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/profile": {
      "get": {
        "tags": ["User"],
        "description": "Retrieves currently logged in user details such as name, email, picture, highest score, total games completed, when account was created, when the last login was, and whether email has been verified.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["User"],
        "description": "Get a list of all users and their information.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": ["User"],
        "description": "Adds a new user to the list of users in the database.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "example": "Tom Hanks"
                },
                "email": {
                  "example": "iamtomhanks@gmail.com"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": ["User"],
        "description": "Retrieve one User object in collection using an ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": ["User"],
        "description": "Delete one user object in the collection using an ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": ["User"],
        "description": "Update an existing user object in the collection using the ID. Example is updating status of the cold case file from unsolved to solved.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "example": "Tom Holland"
                },
                "email": {
                  "example": "thollandswag@gmail.com"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/agencies": {
      "get": {
        "tags": ["Agency Information"],
        "description": "Get a list of all agencies and their information.",
        "parameters": [
          {  
            "name":"name",
            "in":"query",
            "description":"Pass in a specific Agency name to filter just those agency details. EX: Smith County Sheriff’s Department",
            "required":false,
            "type":"string"
          },
          {  
            "name":"phone",
            "in":"query",
            "description":"If you know the phone number of an agency, use that to pull up that agency's details. EX:215-685-7458",
            "required":false,
            "type":"string"
          },
          {  
            "name":"supervisor",
            "in":"query",
            "description":"Pass in the person in charge of the cold case to pull up the agency information. EX: Jason Kocovsky",
            "required":false,
            "type":"string"
          },
          {  
            "name":"supervisorRank",
            "in":"query",
            "description":"If you want to find all agencies with a specific rank, enter the rank here. EX: Detective; Lieutenant; Civillian Investigator; etc.",
            "required":false,
            "type":"string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": ["Agency Information"],
        "description": "Adds a new agency to the list of agencies in the database.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "example": "Baker Co Sheriff's Office, Detective Division"
                },
                "supervisor": {
                  "example": "David Mancini"
                },
                "supervisorRank": {
                  "example": "Lieutenant"
                },
                "phone": {
                  "example": "904-259-9218"
                },
                "email": {
                  "example": "david.mancini@bakerso.com"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/agencies/{id}": {
      "get": {
        "tags": ["Agency Information"],
        "description": "Pass an ID to this endpoint to retrieve a specific agency.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": ["Agency Information"],
        "description": "Pass an ID to this endpoint to delete a specific agency from the list of agencies.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": ["Agency Information"],
        "description": "Give this endpoint an ID number to update a specific agency from the list of agencies.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "example": "Baker Co Sheriff's Office, Detective Division"
                },
                "supervisor": {
                  "example": "David Mancini"
                },
                "supervisorRank": {
                  "example": "Lieutenant"
                },
                "phone": {
                  "example": "904-259-9218"
                },
                "email": {
                  "example": "david.mancini@bakerso.com"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  }
}
