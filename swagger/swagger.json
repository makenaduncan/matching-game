{
    "swagger": "2.0",
    "info": {
      "title": "Cold Case Matching Game API",
      "description": "API endpoints to retrieve information such as cold case data, matching game score list, and game information.",
      "version": "1.0.0"
    },
    "host": [
      "fp-matching-game.herokuapp.com"
    ],
    "basePath": "/",
    "tags": [
      {
        "name": "Game",
        "description": "All API endpoints related to the game collection."
      },
      {
        "name": "Cold Case",
        "description": "API endpoints for retrieving data on cold cases"
      },
      {
        "name": "Score",
        "description": "API endpoints for adding, removing, updating and getting scores."
      }
    ],
    "schemes": [
      "https",
      "http"
    ],
    "paths": {
      "/cases": {
        "get": {
          "tags": [
            "Cold Case"
          ],
          "description": "Get all cold cases in the collection",
          "parameters": [],
          "responses": {
            "200": {
              "description": "OK"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        },
        "post": {
          "tags": [
            "Cold Case"
          ],
          "description": "Create a new cold case. (used for people authorized to create case files.)",
          "parameters": [
            {
              "name": "body",
              "in": "body",
              "schema": {
                "type": "object",
                "properties": {
                  "case-name": {
                    "example": "Baker Co John Doe 1995"
                  },
                  "summarized-case-description": {
                    "example": "any"
                  },
                  "case-type": {
                    "example": "homicide; missing persons, etc."
                  },
                  "victim-picture": {
                    "example": "any"
                  },
                  "victim-name": {
                    "example": "any"
                  },
                  "victim-age": {
                    "example": "any"
                  },
                  "date-body-found": {
                    "example": "any"
                  },
                  "location": {
                    "example": "any"
                  },
                  "status": {
                    "example": "unsolved"
                  },
                  "website-url": {
                    "example": "https://dnadoeproject.org/case/rock-co-john-doe-1981/"
                  },
                  "contact-url": {
                    "example": "any"
                  }
                }
              }
            }
          ],
          "responses": {
            "201": {
              "description": "Created"
            },
            "400": {
              "description": "Bad Request"
            }
          }
        }
      },
      "/cases/{case-type}": {
        "get": {
          "tags": [
            "Cold Case"
          ],
          "description": "This is going to get a case based on the case type given.",
          "parameters": [
            {
              "name": "case-type",
              "in": "path",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "400": {
              "description": "Bad Request"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
      "/cases/{case-date}": {
        "get": {
          "tags": [
            "Cold Case"
          ],
          "description": "This is going to get a case based on the date of the given case file.",
          "parameters": [
            {
              "name": "case-date",
              "in": "path",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "400": {
              "description": "Bad Request"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
      "/cases/{status}": {
        "get": {
          "tags": [
            "Cold Case"
          ],
          "description": "This is going to get a case based on the status of the case file, whether unsolved or solved.",
          "parameters": [
            {
              "name": "case-type",
              "in": "path",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "400": {
              "description": "Bad Request"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
      "/cases/{id}": {
        "get": {
          "tags": [
            "Cold Case"
          ],
          "description": "Retrieve one Cold Case object in collection using an ID.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "400": {
              "description": "Bad Request"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        },
        "delete": {
          "tags": [
            "Cold Case"
          ],
          "description": "Delete one case file object in the collection using an ID.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        },
        "put": {
          "tags": [
            "Cold Case"
          ],
          "description": "Update an existing case file object in the collection using the ID. Example is updating status of the cold case file from unsolved to solved.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "string"
            },
            {
              "name": "body",
              "in": "body",
              "schema": {
                "type": "object",
                "properties": {
                  "case-name": {
                    "example": "Baker Co John Doe 1995"
                  },
                  "summarized-case-description": {
                    "example": "any"
                  },
                  "case-type": {
                    "example": "homicide; missing persons, etc."
                  },
                  "victim-picture": {
                    "example": "any"
                  },
                  "victim-name": {
                    "example": "any"
                  },
                  "victim-age": {
                    "example": "any"
                  },
                  "date-body-found": {
                    "example": "any"
                  },
                  "location": {
                    "example": "any"
                  },
                  "status": {
                    "example": "unsolved"
                  },
                  "website-url": {
                    "example": "https://dnadoeproject.org/case/rock-co-john-doe-1981/"
                  },
                  "contact-url": {
                    "example": "any"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "400": {
              "description": "Bad Request"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
      "/scores": {
        "get": {
          "tags": [
            "Score"
          ],
          "description": "Retrieve all scores from the collection.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "OK"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        },
        "post": {
          "tags": [
            "Score"
          ],
          "description": "Adds score to the database from the complewted game",
          "parameters": [
            {
              "name": "body",
              "in": "body",
              "schema": {
                "type": "object",
                "properties": {
                  "ranking": {
                    "example": "GhostRider123"
                  },
                  "username": {
                    "example": "GhostRider123"
                  },
                  "score": {
                    "example": "138123"
                  }
                }
              }
            }
          ],
          "responses": {
            "201": {
              "description": "Created"
            },
            "400": {
              "description": "Bad Request"
            }
          }
        }
      },
      "/scores/{id}": {
        "get": {
          "tags": [
            "Score"
          ],
          "description": "Get score by user ID (This may not work unless we have a user collection containing a score property)",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        },
        "delete": {
          "tags": [
            "Score"
          ],
          "description": "Removes a score from the database. If wanting to display the top 10 or 20 scores, as scores are added, lower scores can be removed using this API, giving the API the ID of the score.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        },
        "put": {
          "tags": [
            "Score"
          ],
          "description": "Update a specific score found by giving the API an ID. As scores are added, other scores may need to move up or down. This API does that.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "string"
            },
            {
              "name": "body",
              "in": "body",
              "schema": {
                "type": "object",
                "properties": {
                  "ranking": {
                    "example": "12"
                  },
                  "username": {
                    "example": "GhostRider123"
                  },
                  "score": {
                    "example": "138123"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "400": {
              "description": "Bad Request"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
      "/scores/{ranking}": {
        "get": {
          "tags": [
            "Score"
          ],
          "description": "Retrieve score from database when API receives a ranking number. Ranking 1 will return the highest score, 2 the next highest, so on.",
          "parameters": [
            {
              "name": "ranking",
              "in": "path",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        },
        "delete": {
          "tags": [
            "Score"
          ],
          "description": "Similar to the delete for score, this one allows you to use a score rank number instead of the ID.",
          "parameters": [
            {
              "name": "ranking",
              "in": "path",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        },
        "put": {
          "tags": [
            "Score"
          ],
          "description": "Similar to the score update endpoint, except this endpoint uses a rank number instead of ID number.",
          "parameters": [
            {
              "name": "ranking",
              "in": "path",
              "required": true,
              "type": "string"
            },
            {
              "name": "body",
              "in": "body",
              "schema": {
                "type": "object",
                "properties": {
                  "ranking": {
                    "example": "GhostRider123"
                  },
                  "username": {
                    "example": "GhostRider123"
                  },
                  "score": {
                    "example": "138123"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "400": {
              "description": "Bad Request"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
      
      "/designs": {
        "get": {
          "tags": [
            "Designs"
          ],
          "description": "Get all designs in collection",
          "parameters": [],
          "responses": {
            "200": {
              "description": "OK"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        },
        "post": {
          "tags": [
            "Designs"
          ],
          "description": "Create design item and save in design collection",
          "parameters": [
            {
              "name": "body",
              "in": "body",
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "example": "any"
                  },
                  "material": {
                    "example": "any"
                  },
                  "price": {
                    "example": "any"
                  }
                }
              }
            }
          ],
          "responses": {
            "201": {
              "description": "Created"
            },
            "400": {
              "description": "Bad Request"
            }
          }
        }
      },
      "/designs/{id}": {
        "get": {
          "tags": [
            "Designs"
          ],
          "description": "Get one design in collection using an ID.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "400": {
              "description": "Bad Request"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        },
        "delete": {
          "tags": [
            "Designs"
          ],
          "description": "Delete one design in the collection using an ID.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        },
        "put": {
          "tags": [
            "Designs"
          ],
          "description": "Update exisiting contact in the database using ID to locate that contact.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "string"
            },
            {
              "name": "body",
              "in": "body",
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "example": "any"
                  },
                  "material": {
                    "example": "any"
                  },
                  "price": {
                    "example": "any"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "400": {
              "description": "Bad Request"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      }
    }
  }